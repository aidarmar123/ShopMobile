@page "/Products"
<h3>Products</h3>

<div class="filter">

	<Label>
		Category:
		@foreach (var category in DataManager.Categorys)
		{
			<div class="d-inline m-1">
				@category.Name
				<input type="checkbox" @bind:after="Filter" @bind="@category.IsSelect" ></input>
			</div>
		}
	</Label>
	<Label>
		Name
		<input @bind="@SearchText" @bind:after="Filter" />
	</Label>

</div>
<div class="productsBox">
	@foreach (var product in productContext)
	{
		<div>

			<ProductComponent product="@product"></ProductComponent>
			<Button Clicked="@(() => AddBasket(product))">+</Button>
			@if (StaticClass.OrderContext != null)
			{
				<h4>@DataManager.OrderProducts.Where(x => x.ProductId == product.Id && x.OrderId == StaticClass.OrderContext.Id).Count()</h4>
			}
		</div>
	}
</div>


@code {
	private string SearchText { get; set; }

	private List<Product> productContext { get; set; } = DataManager.Products;

	[Inject] IMessageService messageService { get; set; }

	private async Task AddBasket(Product product)
	{
		if (StaticClass.UserAuth != null)
		{
			var order = DataManager.Orders.FirstOrDefault(x => x.UserId == StaticClass.UserAuth.Id && !x.IsFinish);
			if (order != null)
			{
				StaticClass.OrderContext = order;
			}
			else
			{
				var newOrder = new Order()
					{
						UserId = StaticClass.UserAuth.Id,
						DateOrder = DateTime.Now,
						IsFinish = false
					};
				StaticClass.OrderContext = await NetManager.Post("api/Orders", newOrder);
			}
			var newOrderProduct = new OrderProduct
				{
					OrderId = StaticClass.OrderContext.Id,
					ProductId = product.Id,
					CountProduct = 1,
					ColorProduct = "pink"
				};
			await NetManager.Post("api/OrderProducts", newOrderProduct);
			await DataManager.InitData();
		}
		else
		{
			await MessageShow("You don't autorization");
		}

	}
	private async Task Filter()
	{
		productContext = DataManager.Products.Where(x => x.Category.IsSelect).ToList();
		if (!string.IsNullOrWhiteSpace(SearchText))
		{
			productContext = productContext.Where(x => x.Name.Contains(SearchText)).ToList();
		}
	}

	private Task MessageShow(string msg)
	{

		return messageService.Error(msg, "Error");
	}
	private void FilterOnChange(ChangeEventArgs args)
	{
		
		
	}
}
<style>
	.productsBox {
		width: 100%;
		display: flex;
		flex-wrap: wrap;
	}
</style>