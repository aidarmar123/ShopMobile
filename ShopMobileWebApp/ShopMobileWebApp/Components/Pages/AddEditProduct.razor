@page "/Product/Id:{Id:int}"
@inject IJSRuntime jSRuntime
<PageTitle>Product</PageTitle>
<h3>Product</h3>
@if(contextProduct is not null)
{
	<EditForm Model="contextProduct" FormName="ProductSave" OnValidSubmit="SaveProduct">
		<DataAnnotationsValidator />
		<Microsoft.AspNetCore.Components.Forms.ValidationSummary />

		<div>
			<Label>Name</Label><br />
			<InputText @bind-Value="@contextProduct.Name" />
		</div>

		<div>
			<Label>Description</Label><br />
			<InputTextArea @bind-Value="@contextProduct.Description" />
		</div>

		<div>
			<Label>Price in rub</Label><br />
			<InputNumber @bind-Value="@contextProduct.PriceRub" />
		</div>

		<div>
			<Label>Category</Label>
			<InputSelect @bind-Value="@contextProduct.CategoryId">
				@foreach (var category in DataManager.Categorys)
				{
					<option value="@category.Id">@category.Name</option>
				}
			</InputSelect>
		</div>

		<div>
			<Label>Photos</Label>
			<InputFile OnChange="AddPhoto" on multiple accept=".jpg, .png, .jpeg | image/*"></InputFile>
			@if (contextProduct.PhotoProduct.Count > 0)
			{
				<div class="d-inline">
					@foreach (var photo in contextProduct.PhotoProduct)
					{
						<div>
							<img width="100"
							height="100" src='@($"data:image/{photo.Format};base64,{photo.Photo}")'>
							<Button Clicked="@(()=>DeletePhoto(photo))">Delete</Button>

						</div>
					}

				</div>
			}
		</div>



		<button class="btn-primary" type="submit">Save</button>
	</EditForm>
}
else
{
	<h3>Loading...</h3>
}


@code {
	[Parameter]
	public int Id { get; set; }
	private Product contextProduct { get; set; }




	protected override async Task OnInitializedAsync()
	{
		await Refresh();
	}
	async Task Refresh()
	{
		await DataManager.InitData();
		contextProduct = DataManager.Products.FirstOrDefault(x => x.Id == Id) ?? new Product();
		
	}

	private async Task SaveProduct()
	{
		if (Id == 0)
		{
			var product = await NetManager.Post("api/Products", contextProduct);
			await DataManager.InitData();
		}
		else
		{
			await NetManager.Put($"api/Products/{Id}", contextProduct);
		}
		await jSRuntime.InvokeVoidAsync("history.back");
	}
	private async Task AddPhoto(InputFileChangeEventArgs args)
	{
		foreach (var file in args.GetMultipleFiles(3))
		{
			try
			{

				using (var ms = new MemoryStream())
				{
					await file.OpenReadStream(10 * 1024 * 1024).CopyToAsync(ms);
					var photoProduct = new PhotoProduct()
						{
							Photo = Convert.ToBase64String(ms.ToArray()),
							Format = file.ContentType.Split('/')[1]

						};
					if (Id != 0)
					{
						photoProduct.ProductId = Id;
						await NetManager.Post("api/PhotoProducts", photoProduct);
					}
					contextProduct.PhotoProduct.Add(photoProduct);
				}


			}
			catch
			{

			}

		}
		await InvokeAsync(StateHasChanged);
	}
	private async Task DeletePhoto(PhotoProduct photo)
	{
		await NetManager.Delete($"api/PhotoProducts/{photo.Id}");
		await Refresh();
	}
}
