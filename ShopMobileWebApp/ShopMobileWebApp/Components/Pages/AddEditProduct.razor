@page "/Product/Id:{Id:int}"
@inject IJSRuntime jSRuntime
<PageTitle>Product</PageTitle>
<h3>Product</h3>
<EditForm  EditContext="@editContext" FormName="ProductSave" OnValidSubmit="SaveProduct">
	<DataAnnotationsValidator />
	<Microsoft.AspNetCore.Components.Forms.ValidationSummary />

	<div>
		<Label>Name</Label><br />
		<InputText @bind-Value="@contextProduct.Name" />
	</div>

	<div>
		<Label>Description</Label><br />
		<InputTextArea @bind-Value="@contextProduct.Description" />
	</div>

	<div>
		<Label>Price in rub</Label><br />
		<InputNumber @bind-Value="@contextProduct.PriceRub" />
	</div>

	<div>
		<Label>Category</Label>
		<InputSelect @bind-Value="@contextProduct.CategoryId">
			@foreach (var category in DataManager.Categorys)
			{
				<option value="@category.Id">@category.Name</option>
			}
		</InputSelect>
	</div>

	<div>
		<Label>Photos</Label>
		<InputFile OnChange="AddPhoto" on multiple accept=".jpg, .png, .jpeg | image/*"></InputFile>
		@if (contextProduct.PhotoProduct.Count > 0)
		{
			<div class="d-inline">
				@foreach (var photo in contextProduct.PhotoProduct)
				{
					<img width="100"
					height="100" src='@($"data:image/{photo.Format};base64,{photo.Photo}")'>
				}
			</div>
		}
	</div>



	<button class="btn-primary" type="submit" >Save</button>
</EditForm>

@code {
	[Parameter]
	public int Id { get; set; }
	private Product contextProduct { get; set; }


	private EditContext editContext{ get; set; }

	protected override void OnInitialized()
	{
		contextProduct = DataManager.Products.FirstOrDefault(x => x.Id == Id) ?? new Product();
		editContext = new EditContext(contextProduct);
	}
	private async Task SaveProduct()
	{
		if (Id == 0)
		{
			var product = await NetManager.Post("api/Products", contextProduct);
			foreach(var photo in contextProduct.PhotoProduct)
			{
				photo.ProductId = product.Id;
				await NetManager.Post("api/PhotoProducts", photo);
			}
			await DataManager.InitData();
		}
		else
		{
			await NetManager.Put($"api/Products/{Id}", contextProduct);
		}
		await jSRuntime.InvokeVoidAsync("history.back");
	}
	private async Task AddPhoto(InputFileChangeEventArgs args)
	{
		foreach (var file in args.GetMultipleFiles())
		{
			byte[] buffer = new byte[file.Size];
			await file.OpenReadStream().ReadAsync(buffer);
			var photoProduct = new PhotoProduct()
				{
					Photo = Convert.ToBase64String(buffer),
					Format = file.ContentType.Split('/')[1]
					
				};
			if (Id != 0)
			{
				photoProduct.ProductId = Id;
				await NetManager.Post("api/PhotoProducts", photoProduct);
			}
			contextProduct.PhotoProduct.Add(photoProduct);
		}

		editContext.NotifyFieldChanged(new FieldIdentifier(contextProduct, nameof(contextProduct.PhotoProduct)));

		await InvokeAsync(StateHasChanged);
	}
}
